// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id       String   @id @default(uuid())
  email    String   @unique
  phone    String?   @unique
  first    String?
  last     String?
  cases    Case[]
  savedLawyers Lawyer[]
} 

model Lawyer {
  id            String   @id @default(uuid())
  email         String   @unique
  phone         String?   @unique
  first         String?
  last          String?
  description   String?
  firm          String?
  imageUrl      String?
  savedBy       User[]
  services      Service[]
  inquiries Inquiry[]

  verification  LawyerVerificationRequest[]
  invitations   Invitation[]
  offers        Offer[]
}

model Service {
  id        String   @id @default(uuid())
  type      ServiceType
  lawyer    Lawyer   @relation(fields: [lawyerId], references: [id])
  lawyerId  String
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ServiceType {
  advisory
  attorney
  review
  contractDrafting
  contractReview
}

model LawyerVerificationRequest {
  id        String   @id @default(uuid())
  barNumber String
  jurisdiction String
  lawyer    Lawyer   @relation(fields: [lawyerId], references: [id])
  lawyerId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Case {
  // state
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // user input
  whatsUp     String
  goals       String
  dates       String
  documents   Document[]

  // other relevant
  jurisdiction String?

  // ai generated
  title       String?
  description String?
  interview   String?

  // case info review
  status      String
  readyForInvitation Boolean @default(false)
  invitationsSent Boolean @default(false)
  review      String?

  // invitations
  recommendedServiceIds String[] @db.VarChar(255) // Array of Service IDs
  invitations Invitation[]
  offers      Offer[]
}

model Document {
  id        String   @id @default(uuid())
  caseId    String   
  case      Case     @relation(fields: [caseId], references: [id])
  userId    String   // Assuming you want to directly link documents to users as well
  fileName  String
  fileType  String
  url       String   // URL to the document in Supabase Storage
  createdAt DateTime @default(now())
}


////////////////////////


model Invitation {
  id        String   @id @default(uuid())
  
  // on creation
  case      Case     @relation(fields: [caseId], references: [id])
  caseId    String
  lawyers   Lawyer   @relation(fields: [lawyerId], references: [id])
  lawyerId  String
  comment   String
  dueBy     DateTime?

  // set by lawyer
  status            String?
  lawyerComment     String?

  // handler by us
  ourAnalysis       String?
  
  // set by user
  usersFeedback     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([caseId, lawyerId])
}

model Inquiry {
  id        String   @id @default(uuid())
  question   String  @unique
  answer     String?
  lawyerId   String
  lawyer    Lawyer   @relation(fields: [lawyerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Interview {
  id        String   @id @default(uuid())
  invitationId String @unique
  questions String[]
  answers   String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Offer {
  id        String   @id @default(uuid())
  case      Case     @relation(fields: [caseId], references: [id])
  caseId    String
  lawyer    Lawyer   @relation(fields: [lawyerId], references: [id])
  lawyerId  String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price     Int
  message   String
}

// represents the agreement between the user and the lawyer
// model Agreement {
//   id        String   @id @default(uuid())
//   case      Case     @relation(fields: [caseId], references: [id])
//   caseId    String
//   lawyer    Lawyer   @relation(fields: [lawyerId], references: [id])
//   lawyerId  String
//   status    String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   price     Int
//   message   String
// }

////////////////////////