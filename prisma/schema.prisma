// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id       String   @id @default(uuid())
  email    String   @unique
  phone    String?   @unique
  first    String?
  last     String?
  cases    Case[]
  savedLawyers Lawyer[]
} 

model Lawyer {
  id            String   @id @default(uuid())
  email         String   @unique
  phone         String?   @unique
  first         String?
  last          String?
  description   String?
  firm          String?
  savedBy       User[]
  
  verification  LawyerVerificationRequest[]
  invitations   Invitation[]
  offers        Offer[]
}

model LawyerVerificationRequest {
  id        String   @id @default(uuid())
  barNumber String
  jurisdiction String
  lawyer    Lawyer   @relation(fields: [lawyerId], references: [id])
  lawyerId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Case {
  // state
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // user input
  whatsUp     String
  goals       String
  dates       String
  documents   Document[]

  // ai generated
  title       String?
  description String?

  // invitations
  invitations Invitation[]
  offers      Offer[]
}



model Invitation {
  id        String   @id @default(uuid())
  case      Case     @relation(fields: [caseId], references: [id])
  caseId    String
  lawyer    Lawyer   @relation(fields: [lawyerId], references: [id])
  lawyerId  String
  status    String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Offer {
  id        String   @id @default(uuid())
  case      Case     @relation(fields: [caseId], references: [id])
  caseId    String
  lawyer    Lawyer   @relation(fields: [lawyerId], references: [id])
  lawyerId  String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price     Int
  message   String
}



model Document {
  id        String   @id @default(uuid())
  caseId    String   
  case      Case     @relation(fields: [caseId], references: [id])
  userId    String   // Assuming you want to directly link documents to users as well
  fileName  String
  fileType  String
  url       String   // URL to the document in Supabase Storage
  createdAt DateTime @default(now())
}